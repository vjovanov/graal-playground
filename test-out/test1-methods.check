===== AFTER_PARSING (required)
0|StartNode { stamp=Dependency, probability=0.0,  }(3)
1|Local(0) { stamp=a!# Lplayground/GraphBuilder$$anonfun$1;, index=0,  }()
2|Local(1) { stamp=i, index=1,  }()
playground.GraphBuilder$$anonfun$1.apply$mcII$sp(GraphConstruction.scala:38) [bci: 0]
locals: [_, _]
stack: []
locks: []
()
4|Const(Predef$@2068762673) { stamp=a!# Lscala/Predef$;, rawvalue=Predef$@2068762673, value=Object[Predef$@2068762673],  }()
5|Const(String:"blomp") { stamp=a!# Ljava/lang/String;, rawvalue=String:"blomp", value=Object[String:"blomp"],  }()
6|MethodCallTarget { stamp=Extension, returnType=HotSpotResolvedPrimitiveType<void>, invokeKind=Special, targetMethod=HotSpotMethod<Predef$.println>,  }(4,5)
7|Invoke#println { stamp=Void, useForInlining=true, bci=5, inliningRelevance=NaN, probability=0.0, polymorphic=false, targetMethod=HotSpotMethod<Predef$.println>,  }(8,6)
playground.GraphBuilder$$anonfun$1.apply$mcII$sp(GraphConstruction.scala:39) [bci: 8]
locals: [_, _]
stack: []
locks: []
()
10|Const(1) { stamp=i [1] #1, rawvalue=1, value=int[1|0x1],  }()
12|Return { stamp=Void, probability=0.0,  }(10)
----- AFTER_PARSING (required) method calls
  invoke: 7|Invoke#println
    trgt: HotSpotMethod<Predef$.println>
    args: [4|Const(Predef$@2068762673), 5|Const(String:"blomp")]
    info: exact scala.Predef$.println(Object):void
===== AFTER_PARSING
0|StartNode { stamp=Dependency, probability=0.0,  }(3)
1|Local(0) { stamp=a!# Lplayground/GraphBuilder$$anonfun$1;, index=0,  }()
2|Local(1) { stamp=i, index=1,  }()
playground.GraphBuilder$$anonfun$1.apply$mcII$sp(GraphConstruction.scala:38) [bci: 0]
locals: [_, _]
stack: []
locks: []
()
4|Const(Predef$@2068762673) { stamp=a!# Lscala/Predef$;, rawvalue=Predef$@2068762673, value=Object[Predef$@2068762673],  }()
5|Const(String:"blomp") { stamp=a!# Ljava/lang/String;, rawvalue=String:"blomp", value=Object[String:"blomp"],  }()
6|MethodCallTarget { stamp=Extension, returnType=HotSpotResolvedPrimitiveType<void>, invokeKind=Special, targetMethod=HotSpotMethod<Predef$.println>,  }(4,5)
7|Invoke#println { stamp=Void, useForInlining=true, bci=5, inliningRelevance=NaN, probability=0.0, polymorphic=false, targetMethod=HotSpotMethod<Predef$.println>,  }(8,6)
playground.GraphBuilder$$anonfun$1.apply$mcII$sp(GraphConstruction.scala:39) [bci: 8]
locals: [_, _]
stack: []
locks: []
()
10|Const(1) { stamp=i [1] #1, rawvalue=1, value=int[1|0x1],  }()
11|Return { stamp=Void, probability=0.0,  }(10)
----- AFTER_PARSING  method calls
  invoke: 7|Invoke#println
    trgt: HotSpotMethod<Predef$.println>
    args: [4|Const(Predef$@2068762673), 5|Const(String:"blomp")]
    info: exact scala.Predef$.println(Object):void
===== AFTER_PARSING (dead-code)
0|StartNode { stamp=Dependency, probability=0.0,  }(3)
1|Local(0) { stamp=a!# Lplayground/GraphBuilder$$anonfun$1;, index=0,  }()
2|Local(1) { stamp=i, index=1,  }()
playground.GraphBuilder$$anonfun$1.apply$mcII$sp(GraphConstruction.scala:38) [bci: 0]
locals: [_, _]
stack: []
locks: []
()
4|Const(Predef$@2068762673) { stamp=a!# Lscala/Predef$;, rawvalue=Predef$@2068762673, value=Object[Predef$@2068762673],  }()
5|Const(String:"blomp") { stamp=a!# Ljava/lang/String;, rawvalue=String:"blomp", value=Object[String:"blomp"],  }()
6|MethodCallTarget { stamp=Extension, returnType=HotSpotResolvedPrimitiveType<void>, invokeKind=Special, targetMethod=HotSpotMethod<Predef$.println>,  }(4,5)
7|Invoke#println { stamp=Void, useForInlining=true, bci=5, inliningRelevance=NaN, probability=0.0, polymorphic=false, targetMethod=HotSpotMethod<Predef$.println>,  }(8,6)
playground.GraphBuilder$$anonfun$1.apply$mcII$sp(GraphConstruction.scala:39) [bci: 8]
locals: [_, _]
stack: []
locks: []
()
10|Const(1) { stamp=i [1] #1, rawvalue=1, value=int[1|0x1],  }()
11|Return { stamp=Void, probability=0.0,  }(10)
----- AFTER_PARSING (dead-code) method calls
  invoke: 7|Invoke#println
    trgt: HotSpotMethod<Predef$.println>
    args: [4|Const(Predef$@2068762673), 5|Const(String:"blomp")]
    info: exact scala.Predef$.println(Object):void
===== HIGH_LEVEL
0|StartNode(3)
3|FrameState@0()
5|Const(String:"blomp")()
10|Const(1)()
11|Return(10)
17|FrameState@5()
25|FrameState@4(17)
32|CheckCast(80)
34|FrameState@1(25,5)
45|FrameState@4(34)
48|Const(DynamicVariable.$anon$1@1049006454)()
60|Begin()
61|Begin()
62|If(84)
66|EndNode()
67|Merge(73,66,68)
68|EndNode()
69|Begin()
70|Begin()
71|If(85)
72|LoadField#value(127)
73|FrameState@29(87,48)
74|MethodCallTarget(48)
75|Invoke#setInitialValue(76,74)
76|FrameState@33(87,75)
77|EndNode()
78|Merge(81,77,79)
79|EndNode()
80|Phi(72 75)(78,72,75)
81|FrameState@28(87,80)
84|IsNull(90)
85|IsNull(127)
87|FrameState@4(45)
89|CurrentThread()
90|LoadField#inheritableThreadLocals(89)
96|FrameState@16(87,48)
100|LoadField#table(90)
101|ArrayLength(100)
103|-(101,10)
105|LoadField#table(90)
106|LoadIndexed(105,136)
107|Begin()
108|Begin()
109|If(130)
113|==(137,48)
114|EndNode()
115|Merge(120,114,116)
116|EndNode()
117|Begin()
118|Begin()
119|If(113)
120|FrameState@34(132,90,48,136,106)
121|MethodCallTarget(90,48,136,106)
122|Invoke#getEntryAfterMiss(123,121)
123|FrameState@41(132,122)
124|EndNode()
125|Merge(128,124,126)
126|EndNode()
127|Phi(106 122)(125,106,122)
128|FrameState@33(132,127)
130|IsNull(106)
131|!FixedGuard(84)
132|FrameState@2(96)
135|Const(-295853258)()
136|&(103,135)
137|LoadField#referent(106)
139|!FixedGuard(130)
143|MonitorEnter(144,32)
144|FrameState@9(156,32,5,32,32)
151|MonitorExit(152,32)
152|FrameState@20(156,32)
154|IsNull(32)
155|!FixedGuard(154)
156|FrameState@5(25)
183|!FixedGuard(154)
184|FrameState@11(156,32,32,32)
186|MonitorEnter(187,32)
187|FrameState@4(265,32,5,32,32)
196|LoadField#textOut(32)
200|LoadField#textOut(32)
202|Invoke#flushBuffer(203,310)
203|FrameState@23(265,32,5,32,32)
204|LoadField#charOut(32)
208|LoadField#autoFlush(32)
209|Const(0)()
210|==(208,209)
211|Begin()
212|Begin()
213|If(210)
214|Const(10)()
218|<(322,209)
219|EndNode()
220|Merge(254,219,221,229)
221|EndNode()
222|Begin()
223|Begin()
224|If(218)
225|LoadField#out(32)
227|Invoke#flush(228,334)
228|FrameState@53(265,32,32,32)
229|EndNode()
230|MonitorExit(231,32)
231|FrameState@61(265,32,32,270)
245|StoreField#trouble(32,10,246)
246|FrameState@82(265)
254|FrameState@53(265,32,32)
255|MonitorExit(256,32)
256|FrameState@55(265,32)
257|EndNode()
258|Merge(260,257,259)
259|EndNode()
260|FrameState@82(265)
263|!FixedGuard(154)
265|FrameState@9(184)
266|LoadField#out(32)
267|Begin()
268|Begin()
269|If(277)
270|NewInstance()
271|Const(String:"Stream closed")()
277|IsNull(266)
278|!FixedGuard(154)
279|FrameState@5(265,32,5,32,32)
284|FrameState@13(279,270)
285|MethodCallTarget(270,271)
286|Invoke#<init>(287,285)
287|FrameState@5(289)
289|FrameState@2(284)
298|Invoke#write(299,309)
299|FrameState@10(303)
301|IsNull(196)
302|!FixedGuard(301)
303|FrameState@13(265,32,5,32,32)
308|Const(5)()
309|MethodCallTarget(196,5,209,308)
310|MethodCallTarget(200)
311|LoadField#se(204)
313|Invoke#flushBuffer(314,319)
314|FrameState@7(318)
316|IsNull(204)
317|!FixedGuard(316)
318|FrameState@27(265,32,5,32,32)
319|MethodCallTarget(311)
321|MethodCallTarget(5,214,209)
322|Invoke#indexOf(323,321)
323|FrameState@6(325,322)
325|FrameState@40(265,32,32,32)
326|IsNull(225)
327|!FixedGuard(326)
328|Const(140094011131440)()
329|LoadHub(225)
330|==(329,328)
331|FixedGuard(330)
332|ValueAnchor()
333|Pi(225,332)
334|MethodCallTarget(333)
335|MonitorEnter(336,32)
336|FrameState@4(405,32,32,32)
345|LoadField#textOut(32)
349|LoadField#textOut(32)
351|Invoke#flushBuffer(352,457)
352|FrameState@22(405,32,32,32)
353|LoadField#charOut(32)
357|LoadField#autoFlush(32)
359|==(357,209)
360|Begin()
361|Begin()
362|If(359)
363|LoadField#out(32)
365|Invoke#flush(366,474)
366|FrameState@43(405,32,32,32)
367|EndNode()
368|Merge(394,367,369)
369|EndNode()
370|MonitorExit(371,32)
371|FrameState@51(405,32,32,410)
385|StoreField#trouble(32,10,386)
386|FrameState@72(405)
394|FrameState@43(405,32,32)
395|MonitorExit(396,32)
396|FrameState@45(405,32)
397|EndNode()
398|Merge(400,397,399)
399|EndNode()
400|FrameState@72(405)
403|!FixedGuard(154)
405|FrameState@15(156,32,32)
406|LoadField#out(32)
407|Begin()
408|Begin()
409|If(417)
410|NewInstance()
417|IsNull(406)
418|!FixedGuard(154)
419|FrameState@5(405,32,32,32)
424|FrameState@13(419,410)
425|MethodCallTarget(410,271)
426|Invoke#<init>(427,425)
427|FrameState@5(429)
429|FrameState@2(424)
433|LoadField#lineSeparator(345)
438|IsNull(345)
439|!FixedGuard(438)
440|FrameState@12(405,32,32,32)
446|Invoke#write(447,456)
447|FrameState@10(450)
449|!FixedGuard(438)
450|FrameState@5(440)
451|LoadField#value(433)
452|ArrayLength(451)
454|IsNull(433)
455|!FixedGuard(454)
456|MethodCallTarget(345,433,209,452)
457|MethodCallTarget(349)
458|LoadField#se(353)
460|Invoke#flushBuffer(461,466)
461|FrameState@7(465)
463|IsNull(353)
464|!FixedGuard(463)
465|FrameState@26(405,32,32,32)
466|MethodCallTarget(458)
467|IsNull(363)
468|!FixedGuard(467)
469|LoadHub(363)
470|==(469,328)
471|FixedGuard(470)
472|ValueAnchor()
473|Pi(363,472)
474|MethodCallTarget(473)
481|LogicConstant()
482|LogicConstant()
----- HIGH_LEVEL method calls
  invoke: 75|Invoke#setInitialValue
    trgt: HotSpotMethod<ThreadLocal.setInitialValue>
    args: [48|Const(DynamicVariable.$anon$1@1049006454)]
    info: exact java.lang.ThreadLocal.setInitialValue():Object
  invoke: 122|Invoke#getEntryAfterMiss
    trgt: HotSpotMethod<ThreadLocal$ThreadLocalMap.getEntryAfterMiss>
    args: [90|LoadField#inheritableThreadLocals, 48|Const(DynamicVariable.$anon$1@1049006454), 136|&, 106|LoadIndexed]
    info: exact java.lang.ThreadLocal$ThreadLocalMap.getEntryAfterMiss(ThreadLocal, int, ThreadLocal$ThreadLocalMap$Entry):ThreadLocal$ThreadLocalMap$Entry
  invoke: 202|Invoke#flushBuffer
    trgt: HotSpotMethod<BufferedWriter.flushBuffer>
    args: [200|LoadField#textOut]
    info: exact java.io.BufferedWriter.flushBuffer():void
  invoke: 227|Invoke#flush
    trgt: HotSpotMethod<BufferedOutputStream.flush>
    args: [333|Pi]
    info: exact java.io.BufferedOutputStream.flush():void
  invoke: 286|Invoke#<init>
    trgt: HotSpotMethod<Throwable.<init>>
    args: [270|NewInstance, 271|Const(String:"Stream closed")]
    info: exact java.lang.Throwable.<init>(String):void
  invoke: 298|Invoke#write
    trgt: HotSpotMethod<BufferedWriter.write>
    args: [196|LoadField#textOut, 5|Const(String:"blomp"), 209|Const(0), 308|Const(5)]
    info: exact java.io.BufferedWriter.write(String, int, int):void
  invoke: 313|Invoke#flushBuffer
    trgt: HotSpotMethod<StreamEncoder.flushBuffer>
    args: [311|LoadField#se]
    info: exact sun.nio.cs.StreamEncoder.flushBuffer():void
  invoke: 322|Invoke#indexOf
    trgt: HotSpotMethod<String.indexOf>
    args: [5|Const(String:"blomp"), 214|Const(10), 209|Const(0)]
    info: exact java.lang.String.indexOf(int, int):int
  invoke: 351|Invoke#flushBuffer
    trgt: HotSpotMethod<BufferedWriter.flushBuffer>
    args: [349|LoadField#textOut]
    info: exact java.io.BufferedWriter.flushBuffer():void
  invoke: 365|Invoke#flush
    trgt: HotSpotMethod<BufferedOutputStream.flush>
    args: [473|Pi]
    info: exact java.io.BufferedOutputStream.flush():void
  invoke: 426|Invoke#<init>
    trgt: HotSpotMethod<Throwable.<init>>
    args: [410|NewInstance, 271|Const(String:"Stream closed")]
    info: exact java.lang.Throwable.<init>(String):void
  invoke: 446|Invoke#write
    trgt: HotSpotMethod<BufferedWriter.write>
    args: [345|LoadField#textOut, 433|LoadField#lineSeparator, 209|Const(0), 452|ArrayLength]
    info: exact java.io.BufferedWriter.write(String, int, int):void
  invoke: 460|Invoke#flushBuffer
    trgt: HotSpotMethod<StreamEncoder.flushBuffer>
    args: [458|LoadField#se]
    info: exact sun.nio.cs.StreamEncoder.flushBuffer():void
===== MID_LEVEL
0|StartNode(3)
3|FrameState@0()
5|Const(String:"blomp")()
10|Const(1)()
11|Return(10)
17|FrameState@5()
25|FrameState@4(17)
34|FrameState@1(25,5)
45|FrameState@4(34)
48|Const(DynamicVariable.$anon$1@1049006454)()
60|Begin()
61|Begin()
62|If(84)
66|EndNode()
67|Merge(73,66,68)
68|EndNode()
69|Begin()
70|Begin()
71|If(85)
73|FrameState@29(87,48)
75|Invoke#Direct#setInitialValue(76,522)
76|FrameState@33(87,75)
77|EndNode()
78|Merge(81,77,79)
79|EndNode()
80|Phi(1171 75)(78,1171,75)
81|FrameState@28(87,80)
84|IsNull(1154)
85|IsNull(127)
87|FrameState@4(45)
89|CurrentThread()
96|FrameState@16(87,48)
103|-(1160,10)
107|Begin()
108|Begin()
109|If(130)
113|==(1164,48)
114|EndNode()
115|Merge(120,114,116)
116|EndNode()
117|Begin()
118|Begin()
119|If(113)
120|FrameState@34(132,1154,48,136,1162)
122|Invoke#Direct#getEntryAfterMiss(123,518,61)
123|FrameState@41(132,122)
124|EndNode()
125|Merge(128,124,126)
126|EndNode()
127|Phi(1162 122)(125,1162,122)
128|FrameState@33(132,127)
130|IsNull(1162)
132|FrameState@2(96)
135|Const(-295853258)()
136|&(103,135)
144|FrameState@9(156,80,5,80,80)
152|FrameState@20(156,80)
154|IsNull(80)
156|FrameState@5(25)
184|FrameState@11(156,80,80,80)
187|FrameState@4(265,80,5,80,80)
202|Invoke#Direct#flushBuffer(203,754,753)
203|FrameState@23(265,80,5,80,80)
209|Const(0)()
210|==(1228,209)
211|Begin()
212|Begin()
213|If(210)
214|Const(10)()
218|<(322,209)
219|EndNode()
220|Merge(254,219,221,229)
221|EndNode()
222|Begin()
223|Begin()
224|If(218)
227|Invoke#Direct#flush(228,774)
228|FrameState@53(265,80,80,80)
229|EndNode()
231|FrameState@61(265,80,80,484,494)
246|FrameState@82(265)
254|FrameState@53(265,80,80)
256|FrameState@55(265,80)
257|EndNode()
258|Merge(260,257,259,1023)
259|EndNode()
260|FrameState@82(265)
265|FrameState@9(184)
267|Begin()
268|Begin()
269|If(277)
271|Const(String:"Stream closed")()
277|IsNull(1218)
279|FrameState@5(265,80,5,80,80)
284|FrameState@13(279,484)
286|Invoke#Direct#<init>(287,711)
287|FrameState@5(289,494)
289|FrameState@2(284)
298|Invoke#Direct#write(299,750,748)
299|FrameState@10(303)
301|IsNull(1220)
303|FrameState@13(265,80,5,80,80)
308|Const(5)()
313|Invoke#Direct#flushBuffer(314,763,762)
314|FrameState@7(318)
316|IsNull(1224)
318|FrameState@27(265,80,5,80,80)
322|Invoke#Direct#indexOf(323,766)
323|FrameState@6(325,322)
325|FrameState@40(265,80,80,80)
326|IsNull(1230)
328|Const(140094011131440)()
330|==(1232,328)
333|Pi(1230,1231)
336|FrameState@4(405,80,80,80)
351|Invoke#Direct#flushBuffer(352,942,941)
352|FrameState@22(405,80,80,80)
359|==(1347,209)
360|Begin()
361|Begin()
362|If(359)
365|Invoke#Direct#flush(366,957)
366|FrameState@43(405,80,80,80)
367|EndNode()
368|Merge(394,367,369)
369|EndNode()
371|FrameState@51(405,80,80,488,497)
386|FrameState@72(405)
394|FrameState@43(405,80,80)
396|FrameState@45(405,80)
397|EndNode()
398|Merge(400,397,399,1024)
399|EndNode()
400|FrameState@72(405)
405|FrameState@15(156,80,80)
407|Begin()
408|Begin()
409|If(417)
417|IsNull(1331)
419|FrameState@5(405,80,80,80)
424|FrameState@13(419,488)
426|Invoke#Direct#<init>(427,893)
427|FrameState@5(429,497)
429|FrameState@2(424)
438|IsNull(1333)
440|FrameState@12(405,80,80,80)
446|Invoke#Direct#write(447,938,928)
447|FrameState@10(450)
450|FrameState@5(440)
454|IsNull(1335)
460|Invoke#Direct#flushBuffer(461,949,948)
461|FrameState@7(465)
463|IsNull(1343)
465|FrameState@26(405,80,80,80)
467|IsNull(1349)
470|==(1351,328)
473|Pi(1349,1350)
484|VirtualInstance IOException()
488|VirtualInstance IOException()
494|MaterializedObjectState(484,1095)
497|MaterializedObjectState(488,1142)
498|Location()
503|ValueAnchor(61,1056,1056,511)
504|Location()
506|Location()
510||<|(136,1160)
511|Guard(510,61)
512|IndexedLocation(136)
516|Location()
518|HotSpotDirectCallTarget(1154,48,136,1162)
519|Location()
522|HotSpotDirectCallTarget(48)
523|Const(140094011130448)()
527|Begin()
528|Begin()
529|If(535)
534|Deopt()
535|==(1203,523)
539|ValueAnchor(709)
543|Merge(544,569)
544|EndNode()
545|Begin()
546|Begin()
547|If(589)
548|Begin()
549|Begin()
550|If(609)
551|Begin()
552|Begin()
553|If(610)
554|Begin()
555|Begin()
556|If(612)
557|Begin()
558|Begin()
559|If(594)
560|EndNode()
561|Merge(560,562,563,567,568,576,577,604)
562|EndNode()
563|EndNode()
564|Begin()
565|Begin()
566|If(596)
567|EndNode()
568|EndNode()
569|EndNode()
570|Begin()
571|Begin()
572|If(599)
573|Begin()
574|Begin()
575|If(617)
576|EndNode()
577|EndNode()
580|BeginLockScope(144)
581|DirectCompareAndSwap(80,601,592,593)
582|MonitorEnterStubCall(80,580)
583|DirectCompareAndSwap(80,601,1186,595)
584|MonitorEnterStubCall(80,580)
585|DirectCompareAndSwap(80,601,1186,1189)
586|DirectCompareAndSwap(80,601,597,580)
587|MonitorEnterStubCall(80,580)
588|&(1186,605)
589|==(588,606)
591|^(595,1186)
592|&(1186,613)
593||(592,620)
594|==(581,592)
595||(1189,620)
596|==(583,1186)
597||(1186,614)
598|Write(580,615,597,144)
599|==(586,597)
600|-(586,621)
601|Const(0)()
602|Write(580,615,601,144)
604|EndNode()
605|Const(7)()
606|Const(5)()
607|Location()
608|Const(-121)()
609|IntegerTest(591,608)
610|IntegerTest(591,605)
611|Const(768)()
612|IntegerTest(591,611)
613|Const(895)()
614|Const(1)()
615|Location()
616|Const(-4089)()
617|IntegerTest(600,616)
620|Register%r15()
621|Register%rsp()
622|ValueAnchor(709)
627|Merge(628,653)
628|EndNode()
629|Begin()
630|Begin()
631|If(673)
632|Begin()
633|Begin()
634|If(693)
635|Begin()
636|Begin()
637|If(694)
638|Begin()
639|Begin()
640|If(696)
641|Begin()
642|Begin()
643|If(678)
644|EndNode()
645|Merge(644,646,647,651,652,660,661,688)
646|EndNode()
647|EndNode()
648|Begin()
649|Begin()
650|If(680)
651|EndNode()
652|EndNode()
653|EndNode()
654|Begin()
655|Begin()
656|If(683)
657|Begin()
658|Begin()
659|If(701)
660|EndNode()
661|EndNode()
664|BeginLockScope(187)
665|DirectCompareAndSwap(80,601,676,677)
666|MonitorEnterStubCall(80,664)
667|DirectCompareAndSwap(80,601,1202,679)
668|MonitorEnterStubCall(80,664)
669|DirectCompareAndSwap(80,601,1202,1205)
670|DirectCompareAndSwap(80,601,681,664)
671|MonitorEnterStubCall(80,664)
672|&(1202,605)
673|==(672,606)
675|^(679,1202)
676|&(1202,613)
677||(676,704)
678|==(665,676)
679||(1205,704)
680|==(667,1202)
681||(1202,614)
682|Write(664,615,681,187)
683|==(670,681)
684|-(670,705)
686|Write(664,615,601,187)
688|EndNode()
693|IntegerTest(675,608)
694|IntegerTest(675,605)
696|IntegerTest(675,611)
701|IntegerTest(684,616)
704|Register%r15()
705|Register%rsp()
706|ValueAnchor(709)
707|Location()
709|!Guard(154,78)
711|HotSpotDirectCallTarget(1095,271)
712|Begin()
713|Begin()
714|If(735)
715|Begin()
716|Begin()
717|If(737)
718|Begin()
719|Begin()
720|If(738)
721|EndNode()
722|Merge(721,723,724)
723|EndNode()
724|EndNode()
725|EndNode()
726|Merge(725,727)
727|EndNode()
729|EndLockScope(231)
730|CurrentLock()
731|DirectCompareAndSwap(80,601,730,1276)
732|MonitorExitStubCall(80)
733|EndLockScope(231)
734|&(1275,605)
735|==(734,606)
737|==(1276,601)
738|==(731,730)
744|Location()
745|Write(80,744,10,246,709)
746|Location()
748|!Guard(301,267)
750|HotSpotDirectCallTarget(1220,5,209,308)
752|IsNull(1222)
753|!Guard(752,267)
754|HotSpotDirectCallTarget(1222)
755|Location()
757|!Guard(316,267)
759|Location()
761|IsNull(1226)
762|!Guard(761,267)
763|HotSpotDirectCallTarget(1226)
764|Location()
766|HotSpotDirectCallTarget(5,214,209)
768|!Guard(326,223)
770|Location()
772|Guard(330,223)
774|HotSpotDirectCallTarget(333)
775|Begin()
776|Begin()
777|If(798)
778|Begin()
779|Begin()
780|If(800)
781|Begin()
782|Begin()
783|If(801)
784|EndNode()
785|Merge(784,786,787)
786|EndNode()
787|EndNode()
792|EndLockScope(256)
793|CurrentLock()
794|DirectCompareAndSwap(80,601,793,1248)
795|MonitorExitStubCall(80)
796|EndLockScope(256)
797|&(1247,605)
798|==(797,606)
800|==(1248,601)
801|==(794,793)
807|ValueAnchor(709)
811|Merge(812,837)
812|EndNode()
813|Begin()
814|Begin()
815|If(857)
816|Begin()
817|Begin()
818|If(877)
819|Begin()
820|Begin()
821|If(878)
822|Begin()
823|Begin()
824|If(880)
825|Begin()
826|Begin()
827|If(862)
828|EndNode()
829|Merge(828,830,831,835,836,844,845,872)
830|EndNode()
831|EndNode()
832|Begin()
833|Begin()
834|If(864)
835|EndNode()
836|EndNode()
837|EndNode()
838|Begin()
839|Begin()
840|If(867)
841|Begin()
842|Begin()
843|If(885)
844|EndNode()
845|EndNode()
848|BeginLockScope(336)
849|DirectCompareAndSwap(80,601,860,861)
850|MonitorEnterStubCall(80,848)
851|DirectCompareAndSwap(80,601,1303,863)
852|MonitorEnterStubCall(80,848)
853|DirectCompareAndSwap(80,601,1303,1306)
854|DirectCompareAndSwap(80,601,865,848)
855|MonitorEnterStubCall(80,848)
856|&(1303,605)
857|==(856,606)
859|^(863,1303)
860|&(1303,613)
861||(860,888)
862|==(849,860)
863||(1306,888)
864|==(851,1303)
865||(1303,614)
866|Write(848,615,865,336)
867|==(854,865)
868|-(854,889)
870|Write(848,615,601,336)
872|EndNode()
877|IntegerTest(859,608)
878|IntegerTest(859,605)
880|IntegerTest(859,611)
885|IntegerTest(868,616)
888|Register%r15()
889|Register%rsp()
890|ValueAnchor(709)
893|HotSpotDirectCallTarget(1142,271)
894|Begin()
895|Begin()
896|If(917)
897|Begin()
898|Begin()
899|If(919)
900|Begin()
901|Begin()
902|If(920)
903|EndNode()
904|Merge(903,905,906)
905|EndNode()
906|EndNode()
907|EndNode()
908|Merge(907,909)
909|EndNode()
911|EndLockScope(371)
912|CurrentLock()
913|DirectCompareAndSwap(80,601,912,1411)
914|MonitorExitStubCall(80)
915|EndLockScope(371)
916|&(1410,605)
917|==(916,606)
919|==(1411,601)
920|==(913,912)
926|Write(80,744,10,386,709)
928|!Guard(438,407)
930|Location()
933|!Guard(454,407)
935|Location()
938|HotSpotDirectCallTarget(1333,1335,209,1339)
940|IsNull(1341)
941|!Guard(940,407)
942|HotSpotDirectCallTarget(1341)
944|!Guard(463,407)
947|IsNull(1345)
948|!Guard(947,407)
949|HotSpotDirectCallTarget(1345)
952|!Guard(467,361)
955|Guard(470,361)
957|HotSpotDirectCallTarget(473)
958|Begin()
959|Begin()
960|If(981)
961|Begin()
962|Begin()
963|If(983)
964|Begin()
965|Begin()
966|If(984)
967|EndNode()
968|Merge(967,969,970)
969|EndNode()
970|EndNode()
975|EndLockScope(396)
976|CurrentLock()
977|DirectCompareAndSwap(80,601,976,1370)
978|MonitorExitStubCall(80)
979|EndLockScope(396)
980|&(1369,605)
981|==(980,606)
983|==(1370,601)
984|==(977,976)
990|Begin()
991|Begin()
992|If(1013)
993|Begin()
994|Begin()
995|If(1015)
996|Begin()
997|Begin()
998|If(1016)
999|EndNode()
1000|Merge(999,1001,1002)
1001|EndNode()
1002|EndNode()
1003|EndNode()
1004|Merge(1003,1005)
1005|EndNode()
1007|EndLockScope(152)
1008|CurrentLock()
1009|DirectCompareAndSwap(80,601,1008,1451)
1010|MonitorExitStubCall(80)
1011|EndLockScope(152)
1012|&(1450,605)
1013|==(1012,606)
1015|==(1451,601)
1016|==(1009,1008)
1023|EndNode()
1024|EndNode()
1050|IsNull(1337)
1051|!Guard(1050,407)
1055|IsNull(1155)
1056|!Guard(1055,61)
1058|Begin()
1059|Begin()
1060|If(1071)
1061|EndNode()
1062|Merge(1061,1063)
1063|EndNode()
1064|Phi(1234 601)(1062,1234,601)
1066|Register%r15()
1070|+(1234,1153)
1071||<|(1235,1070)
1072|Write(1066,1074,1070)
1074|Location()
1075|Location()
1076|Const(140094011740768)()
1077|Begin()
1078|Begin()
1079|If(1086)
1080|EndNode()
1081|Merge(1080,1094)
1082|Phi(1084 1087)(1081,1084,1087)
1084|NewInstanceStubCall(1076)
1086|==(1064,601)
1087|UnsafeCast(1064)
1090|Location()
1092|Write(1064,615,1256)
1093|Write(1064,1090,1076)
1094|EndNode()
1095|UnsafeCast(1082)
1096|Write(1064,1097,601)
1097|Location()
1098|Write(1064,1099,601)
1099|Location()
1100|Write(1064,1101,601)
1101|Location()
1102|Write(1064,1103,601)
1103|Location()
1104|Write(1064,1105,601)
1105|Location()
1106|Begin()
1107|Begin()
1108|If(1119)
1109|EndNode()
1110|Merge(1109,1111)
1111|EndNode()
1112|Phi(1353 601)(1110,1353,601)
1114|Register%r15()
1118|+(1353,1153)
1119||<|(1354,1118)
1120|Write(1114,1074,1118)
1124|Begin()
1125|Begin()
1126|If(1133)
1127|EndNode()
1128|Merge(1127,1141)
1129|Phi(1131 1134)(1128,1131,1134)
1131|NewInstanceStubCall(1076)
1133|==(1112,601)
1134|UnsafeCast(1112)
1139|Write(1112,615,1383)
1140|Write(1112,1090,1076)
1141|EndNode()
1142|UnsafeCast(1129)
1143|Write(1112,1097,601)
1145|Write(1112,1099,601)
1147|Write(1112,1101,601)
1149|Write(1112,1103,601)
1151|Write(1112,1105,601)
1153|Const(56)()
1154|FloatingRead(89,498,0,0)
1155|FloatingRead(1154,504,0,61)
1160|FloatingRead(1155,506,1056)
1162|FloatingRead(1155,512,0,511)
1164|FloatingRead(1162,516,0,108)
1170|MemoryPhi(0 122)(125,0,122)
1171|FloatingRead(127,519,1170,70)
1183|MemoryPhi(1170 75)(78,1170,75)
1185|ValueAnchor(709)
1186|FloatingRead(80,615,1183,527)
1188|ValueAnchor(709)
1189|FloatingRead(1203,607,580,546)
1201|MemoryPhi(580 581 581 583 583 586 602 586)(561,580,581,581,583,583,586,602,586)
1202|FloatingRead(80,615,1201,561)
1203|FloatingRead(80,770,709)
1204|ValueAnchor(709)
1205|FloatingRead(1203,607,664,630)
1217|MemoryPhi(664 665 665 667 667 670 686 670)(645,664,665,665,667,667,670,686,670)
1218|FloatingRead(80,707,1217,709)
1220|FloatingRead(80,746,1217,709)
1221|ValueAnchor(709,748)
1222|FloatingRead(80,746,298,709)
1223|ValueAnchor(709)
1224|FloatingRead(80,755,202,709)
1225|ValueAnchor(709,757)
1226|FloatingRead(1224,759,202,757)
1228|FloatingRead(80,764,313,709)
1229|ValueAnchor(709)
1230|FloatingRead(80,707,322,709)
1231|ValueAnchor(709,768,772)
1232|FloatingRead(1230,770,768)
1234|FloatingRead(1066,1074,1217)
1235|FloatingRead(1066,1075,1217)
1246|MemoryPhi(313 322 227)(220,313,322,227)
1247|FloatingRead(80,615,1246,220)
1248|FloatingRead(793,615,1246,775)
1255|MemoryPhi(1072 1217)(1062,1072,1217)
1256|FloatingRead(1076,607,1255,1077)
1275|FloatingRead(80,615,286,268)
1276|FloatingRead(730,615,286,712)
1290|MemoryPhi(729 733)(726,729,733)
1302|MemoryPhi(1290 792 796)(258,1290,792,796)
1303|FloatingRead(80,615,1302,258)
1305|ValueAnchor(709)
1306|FloatingRead(1203,607,848,814)
1330|MemoryPhi(848 849 849 851 851 854 870 854)(829,848,849,849,851,851,854,870,854)
1331|FloatingRead(80,707,1330,709)
1333|FloatingRead(80,746,1330,709)
1334|ValueAnchor(709,928,933,1051)
1335|FloatingRead(1333,930,1330,928)
1337|FloatingRead(1335,935,1330,933)
1339|FloatingRead(1337,506,1051)
1341|FloatingRead(80,746,446,709)
1342|ValueAnchor(709)
1343|FloatingRead(80,755,351,709)
1344|ValueAnchor(709,944)
1345|FloatingRead(1343,759,351,944)
1347|FloatingRead(80,764,460,709)
1348|ValueAnchor(709)
1349|FloatingRead(80,707,460,709)
1350|ValueAnchor(709,952,955)
1351|FloatingRead(1349,770,952)
1353|FloatingRead(1114,1074,1330)
1354|FloatingRead(1114,1075,1330)
1368|MemoryPhi(460 365)(368,460,365)
1369|FloatingRead(80,615,1368,368)
1370|FloatingRead(976,615,1368,958)
1382|MemoryPhi(1120 1330)(1110,1120,1330)
1383|FloatingRead(1076,607,1382,1124)
1410|FloatingRead(80,615,426,408)
1411|FloatingRead(912,615,426,894)
1435|MemoryPhi(911 915)(908,911,915)
1449|MemoryPhi(1435 975 979)(398,1435,975,979)
1450|FloatingRead(80,615,1449,398)
1451|FloatingRead(1008,615,1449,990)
1480|LogicConstant()
1482|LogicConstant()
----- MID_LEVEL method calls
Invoke Node: 75|Invoke#Direct#setInitialValue
Invoke Node: 122|Invoke#Direct#getEntryAfterMiss
Invoke Node: 202|Invoke#Direct#flushBuffer
Invoke Node: 227|Invoke#Direct#flush
Invoke Node: 286|Invoke#Direct#<init>
Invoke Node: 298|Invoke#Direct#write
Invoke Node: 313|Invoke#Direct#flushBuffer
Invoke Node: 322|Invoke#Direct#indexOf
Invoke Node: 351|Invoke#Direct#flushBuffer
Invoke Node: 365|Invoke#Direct#flush
Invoke Node: 426|Invoke#Direct#<init>
Invoke Node: 446|Invoke#Direct#write
Invoke Node: 460|Invoke#Direct#flushBuffer
Scope Playground
===== DONE
blomp
